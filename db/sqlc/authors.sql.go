// Code generated by sqlc. DO NOT EDIT.
// source: authors.sql

package db

import (
	"context"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
  "first_name",
  "last_name"
) VALUES (
  $1, $2
) RETURNING author_id, first_name, last_name
`

type CreateAuthorParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.FirstName, arg.LastName)
	var i Author
	err := row.Scan(&i.AuthorID, &i.FirstName, &i.LastName)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE author_id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, authorID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, authorID)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT author_id, first_name, last_name FROM authors 
WHERE "author_id" = $1
`

func (q *Queries) GetAuthor(ctx context.Context, authorID int64) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, authorID)
	var i Author
	err := row.Scan(&i.AuthorID, &i.FirstName, &i.LastName)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT author_id, first_name, last_name FROM authors
ORDER BY "author_id"
LIMIT $1
OFFSET $2
`

type ListAuthorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAuthors(ctx context.Context, arg ListAuthorsParams) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.AuthorID, &i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchAuthors = `-- name: SearchAuthors :one
SELECT author_id, first_name, last_name FROM authors
WHERE "first_name" = $1 AND "last_name" = $2
LIMIT 1
`

type SearchAuthorsParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

func (q *Queries) SearchAuthors(ctx context.Context, arg SearchAuthorsParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, searchAuthors, arg.FirstName, arg.LastName)
	var i Author
	err := row.Scan(&i.AuthorID, &i.FirstName, &i.LastName)
	return i, err
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE authors
SET "first_name" = $2, "last_name" = $3
WHERE   "author_id" = $1
RETURNING author_id, first_name, last_name
`

type UpdateAuthorParams struct {
	AuthorID  int64  `json:"author_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, updateAuthor, arg.AuthorID, arg.FirstName, arg.LastName)
	var i Author
	err := row.Scan(&i.AuthorID, &i.FirstName, &i.LastName)
	return i, err
}

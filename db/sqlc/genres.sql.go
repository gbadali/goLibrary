// Code generated by sqlc. DO NOT EDIT.
// source: genres.sql

package db

import (
	"context"
)

const createGenre = `-- name: CreateGenre :one
INSERT INTO genres (
  "genre_name"
) VALUES (
  $1
) RETURNING genre_id, genre_name
`

func (q *Queries) CreateGenre(ctx context.Context, genreName string) (Genre, error) {
	row := q.db.QueryRowContext(ctx, createGenre, genreName)
	var i Genre
	err := row.Scan(&i.GenreID, &i.GenreName)
	return i, err
}

const deleteGenre = `-- name: DeleteGenre :exec
DELETE FROM genres
WHERE genre_id = $1
`

func (q *Queries) DeleteGenre(ctx context.Context, genreID int64) error {
	_, err := q.db.ExecContext(ctx, deleteGenre, genreID)
	return err
}

const getGenre = `-- name: GetGenre :one
SELECT genre_id, genre_name FROM genres 
WHERE "genre_id" = $1
`

func (q *Queries) GetGenre(ctx context.Context, genreID int64) (Genre, error) {
	row := q.db.QueryRowContext(ctx, getGenre, genreID)
	var i Genre
	err := row.Scan(&i.GenreID, &i.GenreName)
	return i, err
}

const listGenres = `-- name: ListGenres :many
SELECT genre_name FROM genres
ORDER BY "genre_id"
`

func (q *Queries) ListGenres(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listGenres)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var genre_name string
		if err := rows.Scan(&genre_name); err != nil {
			return nil, err
		}
		items = append(items, genre_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchGenres = `-- name: SearchGenres :one
SELECT genre_id FROM genres
WHERE genre_name = $1
LIMIT 1
`

func (q *Queries) SearchGenres(ctx context.Context, genreName string) (int64, error) {
	row := q.db.QueryRowContext(ctx, searchGenres, genreName)
	var genre_id int64
	err := row.Scan(&genre_id)
	return genre_id, err
}

const updateGenre = `-- name: UpdateGenre :one
UPDATE genres
SET "genre_name" = $2
WHERE   "genre_id" = $1
RETURNING genre_id, genre_name
`

type UpdateGenreParams struct {
	GenreID   int64  `json:"genre_id"`
	GenreName string `json:"genre_name"`
}

func (q *Queries) UpdateGenre(ctx context.Context, arg UpdateGenreParams) (Genre, error) {
	row := q.db.QueryRowContext(ctx, updateGenre, arg.GenreID, arg.GenreName)
	var i Genre
	err := row.Scan(&i.GenreID, &i.GenreName)
	return i, err
}

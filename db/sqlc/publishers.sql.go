// Code generated by sqlc. DO NOT EDIT.
// source: publishers.sql

package db

import (
	"context"
	"database/sql"
)

const createPublisher = `-- name: CreatePublisher :one
INSERT INTO publishers (
  "publisher_name",
  "address",
  "phone"
) VALUES (
  $1, $2, $3
) RETURNING publisher_id, publisher_name, address, phone
`

type CreatePublisherParams struct {
	PublisherName string         `json:"publisher_name"`
	Address       sql.NullString `json:"address"`
	Phone         sql.NullString `json:"phone"`
}

func (q *Queries) CreatePublisher(ctx context.Context, arg CreatePublisherParams) (Publisher, error) {
	row := q.db.QueryRowContext(ctx, createPublisher, arg.PublisherName, arg.Address, arg.Phone)
	var i Publisher
	err := row.Scan(
		&i.PublisherID,
		&i.PublisherName,
		&i.Address,
		&i.Phone,
	)
	return i, err
}

const deletePublishers = `-- name: DeletePublishers :exec
DELETE FROM publishers
WHERE publisher_id = $1
`

func (q *Queries) DeletePublishers(ctx context.Context, publisherID int64) error {
	_, err := q.db.ExecContext(ctx, deletePublishers, publisherID)
	return err
}

const getPublisher = `-- name: GetPublisher :one
SELECT publisher_id, publisher_name, address, phone FROM publishers 
WHERE "publisher_id" = $1
`

func (q *Queries) GetPublisher(ctx context.Context, publisherID int64) (Publisher, error) {
	row := q.db.QueryRowContext(ctx, getPublisher, publisherID)
	var i Publisher
	err := row.Scan(
		&i.PublisherID,
		&i.PublisherName,
		&i.Address,
		&i.Phone,
	)
	return i, err
}

const listPublishers = `-- name: ListPublishers :many
SELECT publisher_name FROM publishers
ORDER BY "publisher_id"
`

func (q *Queries) ListPublishers(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listPublishers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var publisher_name string
		if err := rows.Scan(&publisher_name); err != nil {
			return nil, err
		}
		items = append(items, publisher_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPublisher = `-- name: SearchPublisher :one
SELECT publisher_id FROM publishers
WHERE publisher_name = $1
`

func (q *Queries) SearchPublisher(ctx context.Context, publisherName string) (int64, error) {
	row := q.db.QueryRowContext(ctx, searchPublisher, publisherName)
	var publisher_id int64
	err := row.Scan(&publisher_id)
	return publisher_id, err
}

const updatePublisher = `-- name: UpdatePublisher :one
UPDATE publishers
SET "publisher_name" = $2, "address" = $3, "phone" = $4
WHERE   "publisher_id" = $1
RETURNING publisher_id, publisher_name, address, phone
`

type UpdatePublisherParams struct {
	PublisherID   int64          `json:"publisher_id"`
	PublisherName string         `json:"publisher_name"`
	Address       sql.NullString `json:"address"`
	Phone         sql.NullString `json:"phone"`
}

func (q *Queries) UpdatePublisher(ctx context.Context, arg UpdatePublisherParams) (Publisher, error) {
	row := q.db.QueryRowContext(ctx, updatePublisher,
		arg.PublisherID,
		arg.PublisherName,
		arg.Address,
		arg.Phone,
	)
	var i Publisher
	err := row.Scan(
		&i.PublisherID,
		&i.PublisherName,
		&i.Address,
		&i.Phone,
	)
	return i, err
}
